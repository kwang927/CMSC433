//package cmsc433;
//
//import java.util.List;
//import cmsc433.SimulationEvent;
//
///**
// * Validates a simulation
// */
//public class Validate {
//	private static class InvalidSimulationException extends Exception {
//
//		private static final long serialVersionUID = 1L;
//
//		public InvalidSimulationException() {
//		}
//	};
//
//	// Helper method for validating the simulation
//	private static void check(boolean check,
//		String message) throws InvalidSimulationException {
//		if (!check) {
//			System.err.println("SIMULATION INVALID : " + message);
//			throw new Validate.InvalidSimulationException();
//		}
//	}
//
//	/**
//	 * Validates the given list of events is a valid simulation.
//	 * Returns true if the simulation is valid, false otherwise.
//	 *
//	 * @param events - a list of events generated by the simulation
//	 *        in the order they were generated.
//	 *
//	 * @returns res - whether the simulation was valid or not
//	 */
//
//	public static boolean validateSimulation(List<SimulationEvent> events) {
//		try {
//			check(events.get(0).event == SimulationEvent.EventType.SimulationStarting,
//				"Simulation didn't start with initiation event");
//			check(events.get(events.size() - 1).event == SimulationEvent.EventType.SimulationEnded,
//				"Simulation didn't end with termination event");
//
//			/*
//			 * In P2 you will write validation code for things such as:
//			 * Should not have more eaters than specified
//			 * Should not have more cooks than specified
//			 * The Ratsie's capacity should not be exceeded
//			 * The capacity of each machine should not be exceeded
//			 * Eater should not receive order until cook completes it
//			 * Eater should not leave Ratsie's until order is received
//			 * Eater should not place more than one order
//			 * Cook should not work on order before it is placed
//			 */
//
//			return true;
//		} catch (InvalidSimulationException e) {
//			return false;
//		}
//
//	}
//}

package cmsc433;

import java.util.List;
import cmsc433.SimulationEvent;
import cmsc433.SimulationEvent.EventType;

/**
 * Validates a simulation
 */
public class Validate {
	private static class InvalidSimulationException extends Exception {
		public InvalidSimulationException() {
		}
	};

	// Helper method for validating the simulation
	private static void check(boolean check, String message) throws InvalidSimulationException {
		if (!check) {
			System.err.println("SIMULATION INVALID : " + message);
			throw new Validate.InvalidSimulationException();
		}
	}

	/**
	 * Validates the given list of events is a valid simulation. Returns true if the
	 * simulation is valid, false otherwise.
	 *
	 * @param events - a list of events generated by the simulation in the order
	 *               they were generated.
	 *
	 * @returns res - whether the simulation was valid or not
	 */
	public static boolean validateSimulation(List<SimulationEvent> events) {
		try {
			check(events.get(0).event == SimulationEvent.EventType.SimulationStarting,
					"Simulation didn't start with initiation event");
			check(events.get(events.size() - 1).event == SimulationEvent.EventType.SimulationEnded,
					"Simulation didn't end with termination event");
			int peopleInCafe = 0;
			int grillUsers = 0;
			int sodaUsers = 0;
			int fryerUsers = 0;
			int ovenUsers = 0;
			int ordersInProgress = 0;
			for (SimulationEvent thisEvent : events) {
				if (thisEvent.event.equals(EventType.CustomerEnteredRatsies))
					peopleInCafe++;
				else if (thisEvent.event.equals(EventType.CustomerLeavingRatsies))
					peopleInCafe--;
				else if (thisEvent.event.equals(EventType.MachinesStartingFood) && thisEvent.food.name.equals("subs"))
					grillUsers++;
				else if (thisEvent.event.equals(EventType.MachinesDoneFood) && thisEvent.food.name.equals("subs"))
					grillUsers--;
				else if (thisEvent.event.equals(EventType.MachinesStartingFood) && thisEvent.food.name.equals("soda"))
					sodaUsers++;
				else if (thisEvent.event.equals(EventType.MachinesDoneFood) && thisEvent.food.name.equals("soda"))
					sodaUsers--;
				else if (thisEvent.event.equals(EventType.MachinesStartingFood) && thisEvent.food.name.equals("fries"))
					fryerUsers++;
				else if (thisEvent.event.equals(EventType.MachinesDoneFood) && thisEvent.food.name.equals("fries"))
					fryerUsers--;
				else if (thisEvent.event.equals(EventType.MachinesStartingFood) && thisEvent.food.name.equals("pizza"))
					ovenUsers++;
				else if (thisEvent.event.equals(EventType.MachinesDoneFood) && thisEvent.food.name.equals("pizza"))
					ovenUsers--;
				else if (thisEvent.event.equals(EventType.CookReceivedOrder))
					ordersInProgress++;
				else if (thisEvent.event.equals(EventType.CookCompletedOrder))
					ordersInProgress--;

				if (peopleInCafe > 50)
					System.out.println("There were too many people in the restaurant");
				if (ordersInProgress > 200)
					System.out.println("There are more cooks working on orders than there are cooks");
				if (grillUsers > 40)
					System.out.println("There are too many people using the grill");
				if (sodaUsers > 40)
					System.out.println("There are too many people using the soda maker");
				if (fryerUsers > 40)
					System.out.println("There are too many people using the fryer");
				if (ovenUsers > 40)
					System.out.println("There are too many people using the oven");

			}
			/*
			 * In P2 you will write validation code for things such as: Should not have more
			 * eaters than specified Should not have more cooks than specified The coffee
			 * shop capacity should not be exceeded The capacity of each machine should not
			 * be exceeded Eater should not receive order until cook completes it Eater
			 * should not leave coffee shop until order is received Eater should not place
			 * more than one order Cook should not work on order before it is placed
			 */

			return true;
		} catch (InvalidSimulationException e) {
			return false;
		}
	}
}